import { existsSync } from "node:fs";
import {
  addComponentsDir,
  addImportsDir,
  addLayout,
  addTemplate,
  resolveFiles,
  useNuxt,
} from "@nuxt/kit";
import { basename, join, parse } from "pathe";
import { kebabCase } from "scule";
import { useLogger } from "../runtime/internal";
import { defineBuildStep } from "./utils/runner";

export default defineBuildStep({
  name: "app",
  async setup({ runtimeResolve }) {
    const logger = useLogger("app");
    const nuxt = useNuxt();

    addComponentsDir({
      path: runtimeResolve("./app/components"),
      prefix: "Smile",
      pathPrefix: false,
      watch: true,
    });
    logger.success("Added components directory.");

    addImportsDir(runtimeResolve("./app/composables"));
    logger.success("Added composables directory.");

    const layoutBasePath = runtimeResolve("./app/layouts");
    const templatePaths: string[] = [];
    const layouts = await resolveFiles(layoutBasePath, ["**/*.vue"]);

    for (const layout of layouts) {
      const { name } = parse(layout);
      const filename = join("smile/layouts", layout.replace(layoutBasePath, ""));
      addLayout(
        {
          src: layout,
          filename,
          write: true,
        },
        `smile-${kebabCase(basename(name))}`
      );
      templatePaths.push(filename);
    }
    logger.success("Added layouts.");

    // Check if user has defined app.vue, if not create one with SmileLayout
    nuxt.hook("app:resolve", async (app) => {
      const userAppPath = runtimeResolve(join(nuxt.options.srcDir, "app.vue"));

      if (!existsSync(userAppPath)) {
        // User hasn't defined app.vue, create one for them
        logger.info("No app.vue found, creating one with SmileLayout wrapper");
        const appTemplate = addTemplate({
          filename: join(nuxt.options.srcDir, "app.vue"),
          write: true,
          getContents: () => appVueTemplate,
        });
        app.mainComponent = appTemplate.dst;
        logger.success("Seeded `app.vue`.");
      } else {
        // User has app.vue, remind them to use SmileLayout
        logger.warn(
          "User app.vue detected. Ensure it includes <SmileLayout> wrapper for full functionality"
        );
      }
    });
  },
});

const appVueTemplate = [
  `<script setup lang="ts">`,
  `  // This file was auto-generated by smilelab`,
  `  // While you can customize this file, you should be sure the following`,
  `  //   remain present:`,
  `  //   - <UApp />`,
  `  //   - <SmileLayout />`,
  `  //   - <NuxtLayout />`,
  `  //   - <NuxtPage />`,
  `  // This will ensure that both \`Smile\` and \`Nuxt\` work as-intended.`,
  `  import { UApp, SmileLayout, NuxtLayout, NuxtPage, NuxtRouteAnnouncer } from "#components"`,
  `</script>`,
  ``,
  `<template>`,
  `  <UApp>`,
  `    <SmileLayout>`,
  `      <NuxtLayout>`,
  `        <NuxtRouteAnnouncer />`,
  `        <NuxtPage />`,
  `      </NuxtLayout>`,
  `    </SmileLayout>`,
  `  </UApp>`,
  `</template>`,
].join("\n");
